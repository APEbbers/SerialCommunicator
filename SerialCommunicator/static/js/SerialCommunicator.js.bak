/*
 * View model for SerialCommunicator
 *
 * Author: A.P. Ebbers
 * License: AGPLv3
 */
$(function () {
    function SerialcommunicatorViewModel(parameters) {
        var self = this;

        self.settings = parameters[0];

        self.CreateList = function () {
            let objItems = [
                'Blue',
                'Red',
                'White',
                'Green',
                'Black',
                'Orange',
            ],
                objSelect = self.getElementById("selectedPort2");

            for (index in objItems) {
                var objOption = new self.createElement("option");

                objOption.innerText = objItems[item];
                objOption.value = objItems[item];

                objSelect.appendChild(objOption);
            };



            // objSelect = self.getElementById("selectedPort2");
            // for (var item in objItems){
            //     objSelect.add(new Option(objItems[item]))
            // }
        };

        // This will get called before the HelloWorldViewModel gets bound to the DOM, but after its
        // dependencies have already been initialized. It is especially guaranteed that this method
        // gets called _after_ the settings have been retrieved from the OctoPrint backend and thus
        // the SettingsViewModel been properly populated.
        self.onBeforeBinding = function () {
            self.CreateList();
            self.selectedPort2 = self.settings.plugins.SerialCommunicator.selectedPort2()
            console.log(self.selectedPort2)
        };
    }

    // This is how our plugin registers itself with the application, by adding some configuration
    // information to the global variable OCTOPRINT_VIEWMODELS
    ADDITIONAL_VIEWMODELS.push([
        // This is the constructor to call for instantiating the plugin
        [SerialcommunicatorViewModel],

        // This is a list of dependencies to inject into the plugin, the order which you request
        // here is the order in which the dependencies will be injected into your view model upon
        // instantiation via the parameters argument
        ["settingsViewModel"],

        // Finally, this is the list of selectors for all elements we want this view model to be bound to.
        // ["settings_plugin_Serialcommunicator"],
    ]);
});